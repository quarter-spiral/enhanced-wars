{
  "author": {
    "name": "Firebase"
  },
  "name": "firebase-token-generator",
  "description": "A utility to generate signed Firebase Authentication Tokens",
  "version": "0.1.4",
  "main": "./lib/FirebaseTokenGenerator",
  "dependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/firebase/firebase-token-generator-node.git"
  },
  "keywords": [
    "Firebase",
    "JWT"
  ],
  "license": "MIT",
  "readme": "# Node.js Token Generator Library\n\nFirebase provides our own easy-to-use auth token generating library for Node.js, \nwhich you can install as shown:\n\n```bash\n    $ npm install firebase-token-generator\n```\n\nTo generate tokens, you'll need your Firebase Secret which you can find by \nentering your Firebase URL into a browser and clicking the \"Auth\" tab.\n<span style=\"color:red\">NOTE: You should only generate tokens on trusted \nservers since it requires your Firebase Secret.</span>\n\nOnce you've downloaded the library and grabbed your Firebase Secret, you can \ngenerate a token with this snippet of Node.js code:\n\n```js\n    var FirebaseTokenGenerator = require(\"firebase-token-generator\");\n    var tokenGenerator = new FirebaseTokenGenerator(YOUR_FIREBASE_SECRET);\n    var token = tokenGenerator.createToken({some: \"arbitrary\", data: \"here\"});\n```\n\nYou pass `createToken()` an arbitrary JSON object which is then available for \nuse within your security rules via the [auth variable](https://www.firebase.com/docs/security/rule-expressions/auth.html).\nThis is how you pass trusted authentication details (e.g. the client's user \nid) into your Firebase rules.\n\nYou can specify a second (options) argument to createToken which can contain \noptions and flags to modify how Firebase treats the token. Available options \nare:\n\n* **expires** (Number) - A timestamp (as number of seconds since epoch)\ndenoting the time after which this token should no longer be valid.\n\n* **notBefore** (Number) - A timestamp (as number of seconds since epoch)\ndenoting the time before which this token should be rejected by the server.\n\n* **admin** (boolean) - Set to true if you want to disable all\n[security rules](https://www.firebase.com/docs/security/rule-expressions/index.html) for this client.\n\n* **debug** (boolean) - Set to true to enable debug output from your Security \nRules.  This debug output will be automatically output to the JavaScript \nconsole for any client that's authenticated with a token with the debug flag \nset to true.  You should generally <i>not</i> leave this set to true in \nproduction (as it slows down the rules implementation and gives your users \nvisibility into your rules), but it can be helpful for debugging.\n\nYou can generate a token with options by passing a second argument to \n`createToken()`, as shown:\n\n```js\n    var token = tokenGenerator.createToken(\n      {some: \"arbitrary\", data: \"here\"},\n      {admin: true}\n    );\n```\n\nTesting\n-------\nThe test suite is in test/test.js. Run it by:\n\n```bash\n    $ npm install -g mocha\n    $ mocha\n    5 tests complete\n```\n\nLicense\n-------\n[MIT](http://firebase.mit-license.org)\n",
  "_id": "firebase-token-generator@0.1.4",
  "dist": {
    "shasum": "7c0b8727fd5444606e754b46487f93a54429728a"
  },
  "_from": "firebase-token-generator@~0.1.3"
}
